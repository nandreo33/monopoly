
#ifndef monopoly_h
#define monopoly_h
#include <iostream>
using namespace std;
#include <string>
using namespace std;

class Space 
{
protected:
	const string name;
public:
	virtual void do_action() { cout << "ERROR: called do_action() on space";};
	const string get_name() const { return name;};
};

enum color_t 
{	
	brown, 
	light_blue, 
	purple, 
	orange, 
	red, 
	yellow, 
	green, 
	blue,
	railroad,
	utility
};

class ColorGroup
{
private:
	const int purchase_cost;
	const int building_cost;
	const int num_properties;
	const color_t color;
public:
	color_t get_color_type() const {	return color;};
	int get_building_cost() const {	return building_cost;};
	int get_purchase_cost() const {	return purchase_cost;};
	ColorGroup(int p_c, int b_c, int n_p, color_t col) : 
		purchase_cost(p_c),		//how much does it cost to buy a prop of this group?
		building_cost(b_c),	 	//how much does it cost to build on this group?
		num_properties(n_p),	//how many properties in the group?
		color(col)				//what color_t (enum) is the group?
	{};
};
Â© 2017 GitHub, Inc.

class Property : public Space
{
private:
  const int base_rent;
  int num_buildings;
  bool buildable;
  bool mortgaged;
  Player* owner;        // this will be an error? include Player at compile time?
  const string name;
  const ColorGroup color;    // should this pass by reference? does it matter?
public:
  int get_rent() const;
  int get_num_buildings() const;
  ColorGroup get_color() const;
  bool is_buildable() const;
  string get_name() const;
  void mortgage();
  void add_building();
  void set_owner(Player* player);
  Player* get_owner() const;
  void do_action();
  Property(int b_r, bool is_b, string name, ColorGroup col);
};

class player{
private:
    vector<Property*> owned_properties;
    string name;
    int balance;
    int position;
    int property_size;
    int in_jail;

public:
    player(string, int, int, int);
    string getName();
    int getPosition();
    int getProperty_size();
    void add_money(int amount);
    void subtract_money(int amount);
    int get_balance();
    void moves(int amount);
    void move_to_position( int position );
    void add_property(Property* property);
    void remove_property( Property* property);
    int num_owned_railroads();
    int num_owned_utilities();
    void print_properties();
};
#endif //monoply_h
